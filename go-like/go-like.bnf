# type=definition
# first type is special, means union
file={package,[stmt]}

stmt={type,...}
stmt(import)={[name]}
stmt(func_def)={reciever_decl,name,params,body:[stmt]}
stmt(var_decl)={name,type_decl}
stmt(struct_decl)={[stmt(var_decl)],is_interface,embedded_from}
stmt(assign)={[left_val],[expr]}
stmt(const)={left_val,literal}
stmt(return)={expr}
stmt(if)={cond,then:[stmt],else:[stmt]}
stmt(for_classic)={init:expr,cond:expr,post:expr,body:[stmt]}
stmt(for_range)={[name],range:expr,body:[stmt]}
stmt(for_switch)={cond,switch_case,default:[stmt]}
stmt(expr)={expr}

closure={params,body:[stmt]}

expr={type,...}
expr(literal)={literal}
expr(list)={[expr]}
expr(map)={[kv]}
expr(call)={reciever,callee,params:[expr],variadic_name,is_coroutine}
expr(array_deref)={expr,index:expr}
expr(pointer_deref)={expr}
expr(pointer_ref)={expr}
expr(member)={expr,member:expr}
expr(alloc_struct)={struct_type,struct_init_map}
expr(read_chan)={chan:expr,left_val}
expr(send_chan)={chan:expr,value:expr}

type_decl={type,is_chan,...}
type_decl(var)={name}
type_decl(array)={name,len}
type_decl(slice)={name}
type_decl(map)={k_type,v_type}
type_decl(pointer)={name}
type_decl(func)={reciever,params:[type],return}

reciever_decl={type,name}
params={has_variadic:bool,[name]}
left_val={type,...}
left_val(name)={name}
left_val(deref)={expr(deref)}
left_val(member)={expr(member)}
cond={stmt(assign),expr}
switch_case={case:[expr],[stmt]}
literal={type,...}
literal(int)={int}
literal(float)={float}
literal(string)={string}
kv={key:expr,value:expr}
struct_init_map={[kv]}
callee={type,...}
callee(name)={name}
callee(closure)={closure}
