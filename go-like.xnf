file={package,[stmt]}

stmt={type,...}
stmt(type=import)={[name]}
stmt(type=func_decl)={reciever_decl,name,params,body:[stmt]}
stmt(type=var_decl)={name,type_decl}
stmt(type=struct_decl)={[stmt(type=var_decl)],is_interface,embedded_from}
stmt(type=assign)={[left_val],[expr]}
stmt(type=const)={left_val,literal}
stmt(type=return)={expr}
stmt(type=if)={cond,then:[stmt],else:[stmt]}
stmt(type=for_classic)={init:expr,cond:expr,post:expr,body:[stmt]}
stmt(type=for_range)={[name],range:expr,body:[stmt]}
stmt(type=for_switch)={cond,switch_case,default:[stmt]}
stmt(type=expr)={expr}

closure={params,body:[stmt]}

expr={type,...}
expr(type=literal)={literal}
expr(type=list)={[expr]}
expr(type=map)={[kv]}
expr(type=call)={reciever,callee,params:[expr],variadic_name,is_coroutine}
expr(type=deref)={expr,index:expr}
expr(type=pointer_deref)={expr}
expr(type=member)={expr,member:expr}
expr(type=alloc_struct)={struct_type,struct_init_map}
expr(type=read_chan)={chan:expr,left_val}
expr(type=send_chan)={chan:expr,value:expr}

type_decl={type,is_chan,...}
type_decl(type=var)={name}
type_decl(type=array)={name,len}
type_decl(type=slice)={name}
type_decl(type=map)={k_type,v_type}
type_decl(type=pointer)={name}
type_decl(type=func)={reciever,params:[type],return}

reciever_decl={type,name}
params={type,...}
params(type=list)={[name]}
params(type=variadic)={name}
left_val={type,...}
left_val(type=name)={name}
left_val(type=deref)={expr(type=deref)}
left_val(type=member)={expr(type=member)}
cond={stmt(type=assign),expr}
switch_case={case:[expr],[stmt]}
literal={type,...}
literal(type=int)=(int)
literal(type=float)=(float)
literal(type=string)=(string)
kv={key:expr,value:expr}
struct_init_map={[kv]}
callee={type,...}
callee(type=name)={name}
callee(type=closure)={closure}
